MIND YOUR P'S AND Q'S
''''
Decrypt my super sick RSA:
c: 62324783949134119159408816513334912534343517300880137691662780895409992760262021
n: 1280678415822214057864524798453297819181910621573945477544758171055968245116423923
e: 65537
'''

c = 62324783949134119159408816513334912534343517300880137691662780895409992760262021
n = 1280678415822214057864524798453297819181910621573945477544758171055968245116423923
e = 65537

#Se uso una pagina para factorizar n
p =  1899107986527483535344517113948531328331
q = 674357869540600933870145899564746495319033

t = (p-1) * (q-1)
d = pow(e, -1, t)

p = pow(c, d, n)

print(bytearray.fromhex(hex(p)[2:]).decode('ascii'))

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
THE NUMBERS

import string

mensaje = " "

for i in [16, 9, 3, 15, 3, 20, 6, 20, 8, 5, 14, 21, 13, 2, 5, 18, 19, 13, 1, 19, 15, 14]:
    mensaje += string.ascii_uppercase[i-1]

print(mensaje)

//////////////////////////////
NO PADDING
''''
n: 130086379998427699453581747539884778138525569074225218620900606132008342282010702339318264306958355561329974587953801628062755556917459255041737502998291434879653260782055898032470225504605817008361030931954160532654428455597816847318586194925724864435402978381944611977344748602336153510093058254563859031519
e: 65537
ciphertext: 12428859157040928252783820273487627836760811708629009307125058606239141296849785880616497669160211179783052310304592749322878381341362637381891806630973225131315966843480174505032669546537770873011782085944571433794405894323650567346853824737407399443939192998678577363134450015869047215738427110883437968290
'''

#Estos son los pasos que se siguen en el terminal
n = 130086379998427699453581747539884778138525569074225218620900606132008342282010702339318264306958355561329974587953801628062755556917459255041737502998291434879653260782055898032470225504605817008361030931954160532654428455597816847318586194925724864435402978381944611977344748602336153510093058254563859031519
e = 65537
c = 12428859157040928252783820273487627836760811708629009307125058606239141296849785880616497669160211179783052310304592749322878381341362637381891806630973225131315966843480174505032669546537770873011782085944571433794405894323650567346853824737407399443939192998678577363134450015869047215738427110883437968290

x = pow(2, e, n)

c * x

#Uso el resultado de c*x en el desencriptador y me da un numero m
m = m//2

from Crypto.Util.number import long_to_bytes

long_to_bytes(m)

/////////////////////////////

PIXALATED
from PIL import Image

first_image = Image.open("scrambled1.png")
first_image_pixels = first_image.load()

second_image = Image.open("scrambled2.png")
second_image_pixels = second_image.load()

result_image = Image.new("RGBA", first_image.size)
result_pixels = result_image.load()

for row in range(first_image.size[1]):
    for column in range(first_image.size[0]):

        new_pixel = (
            (first_image_pixels[row, column][0] + second_image_pixels[row, column][0]) % 256,
            (first_image_pixels[row, column][1] + second_image_pixels[row, column][1]) % 256,
            (first_image_pixels[row, column][2] + second_image_pixels[row, column][2]) % 256
        )
        result_pixels[row, column] = new_pixel

result_image.save("combined_flag.png")
